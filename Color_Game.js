// !Introducci√≥n
// En este proyecto, crear√°s un juego en el que el usuario deber√° adivinar un color a partir de su c√≥digo RGB.

// ‚ö†Ô∏è Importante: La clave del √©xito de tu proyecto es que hagas todo paso a paso. Es decir, no pienses en el paso 6 antes de que funcionen los 5 anteriores.

// Avanz√° a las siguientes secciones para leer sobre nuestra metodolog√≠a y las reglas del juego.
// =====================================================================================================================

// !Metodolog√≠a

// üë©‚Äçüè´üë®‚Äçüè´ Sugerimos que realices este proyecto usando el üçÖ M√©todo Pomodoro.
// ¬øQu√© Es El üçÖ M√©todo Pomodoro?
// El M√©todo Pomodoro (del italiano "tomate") es una t√©cnica de administraci√≥n del tiempo creada por Francesco Cirillo.

// Recapitulando, el m√©todo consiste en dividir el tiempo de trabajo en bloques de 25 minutos ("pomodoros"), separados por cinco minutos de descanso.
// Durante esos 25 minutos, deber√°s concentrarte solo en una actividad hasta que suene la alarma. Luego, sugerimos que te levantes, estires y desconectes antes de retomar tu trabajo.
// Al completar cuatro "pomodoros", podr√°s tomarte un descanso m√°s largo de 20 o 30 minutos.

// Mir√° el siguiente gr√°fico:

// ¬øPara Qu√© Sirve?

// El M√©todo Pomodoro:

//     Sirve para fijar un l√≠mite de tiempo.
//     Facilita la realizaci√≥n de tareas al dividirlas en bloques manejables.
//     Fomenta la concentraci√≥n.
//     Aumenta la productividad.
//     Evita el multitasking: la realizaci√≥n de m√°s de una tarea al mismo tiempo.

// Herramientas Digitales

// Existen muchas herramientas online para medir el tiempo. Algunas de ellas son:

//     Pomodoro Tracker
//     Pomofocus
//     Pomodor
//     Marinara Timer

// üë©‚Äçüè´üë®‚Äçüè´ ¬°Eleg√≠ la herramienta que mejor se adapte a tus necesidades!
// ===============================================================================================================

// ! Las Reglas Del Juego
/*
Las Reglas Del Juego
Las reglas del juego son simples. El programa mostrar√° un c√≥digo RGB y opciones posibles para que el usuario adivine cu√°l es la correcta. El usuario podr√° jugar en dos niveles: el f√°cil (con 3 colores) o el dif√≠cil (con 6). En cualquier caso, el juego le permitir√° hacer click en todas las opciones hasta que d√© con la correcta.
‚ö†Ô∏è Importante: para entender mejor mir√° este Proyecto.

Sintaxis De Las Funciones
Asegurate de escribir tus funciones usando esta sintaxis:

function saludar() {
  console.log("¬°Hola!");
}

Al hacerlo, JavaScript primero guardar√° la Funci√≥n en la memoria y, luego, cuando la queramos llamar ejecutar√° el c√≥digo.
Esto nos servir√° para organizar mejor el c√≥digo, poniendo la definici√≥n de las Funciones en una secci√≥n y su uso en otra.
Si ejecutar√°mos la Funci√≥n antes de declararla, funcionar√≠a igual porque JS ya la ley√≥ antes de empezar a correr el programa.
Veamos un ejemplo de esto √∫ltimo:
llamarBatman();
function llamarBatman() {
  alert("Soy Batman.");
}
=====================================================================================================================================
*/
// ! Paso A Paso (Parte 1)
// Paso 1: Archivos HTML Y CSS
/*Para que practiques JavaScript a fondo te ayudaremos con los pasos de HTML y CSS:

    Cre√° los archivos index.html y style.css.
    Luego ingres√° a este link.
    Copi√° el c√≥digo que se encuentra dentro de cada uno de los archivos y pegalos en los que creaste en el VSC, seg√∫n corresponda.
 
 
 ‚ö†Ô∏è Importante : m√°s all√° de que te demos resuelta esta parte, ten√©s la libertad de hacer las modificaciones que quieras en tus archivos.
 */
//                                     ====================================
// ! Paso 2 : Dar Color A Las Tarjetas
/*

    Cre√° un archivo JavaScript para darle a cada cuadrado un color distinto:
        Cre√° un Arreglo llamado colors y escrib√≠ 6 colores en formato RGB.

‚ö†Ô∏è Importante: Escrib√≠ los colores respetando esta sintaxis (con los espacios) "rgb(240, 14, 128)". 

    Pista: Escrib√≠ los Strings con una misma sintaxis. Un espacio de m√°s (o de menos) puede hacer que el juego no funcione.


   2 Asignale a cada cuadrado un color:

    Seleccion√° todos los cuadrados usando querySelectorAll().
    Recorrelos usando un for Loop. En cada vuelta del Loop, asignale un color del Arreglo colors.

    Pista: Aprovech√° la Variable i, no solo para acceder al cuadrado espec√≠fico, sino tambi√©n al color.

    üìõ Asegurate de que los 6 cuadrados tengan los colores del Arreglo colors.


üë©üèª‚Äçüíªüë®‚ÄçüíªAcerca De Los Selectores
Cada vez que selecciones un elemento utiliz√° una Variable para guardarlo. Por ejemplo, escribir la Variable square, es m√°s r√°pido que document.querySelectorAll(".square")

Avanz√° a la siguiente secci√≥n para continuar con tu proyecto.



*/

// =========================================================================================================

// ! Paso A Paso (Parte 2)
// ! Paso 3: El Contenido De La P√°gina
/* En esta parte del proyecto, crear√°s el t√≠tulo del juego: "The Great Guessing Game". Deber√°s lograr que se muestre el c√≥digo RGB del color ganador.

Para hacerlo, segu√≠ estos pasos:

  1  Dentro del span #colorDisplay ir√° el c√≥digo RGB del color ganador.

  2  Cre√° la Variable pickedColor. Dale un color espec√≠fico (por ejemplo colors[3]) y su valor al texto de #colorDisplay.

üë©‚Äçüè´üë®‚Äçüè´ M√°s adelante, la Variable tendr√° un color aleatorio (seleccionado del Arreglo).

 3 Comprob√° que el c√≥digo RGB aparezca correctamente en el <h1>.
*/
// Paso 3: El Contenido De La P√°gina

// Cre√° la Variable pickedColor. Dale un color espec√≠fico (por ejemplo colors[3]) y su valor al texto de #colorDisplay.
// var pickedColor = colors[3]; // Puedes cambiar el √≠ndice seg√∫n el color que desees.

// Seleccion√° el elemento con el id #colorDisplay y asignale el valor de pickedColor.
// var colorDisplay = document.getElementById('colorDisplay');
// colorDisplay.textContent = pickedColor;

//  Comprob√° que el c√≥digo RGB aparezca correctamente en el <h1>.
// var h1 = document.getElementById('h1');
// h1.textContent = 'The Great Guessing Game\n' + pickedColor;

// ! Paso 4: Un Poco Del Juego

/* Ahora empecemos con la l√≥gica del juego.
Cuando el usuario haga click en un cuadrado incorrecto, √©ste desaparecer√° (cambiando su color de fondo al mismo que el del <body>) y, al mismo tiempo, aparecer√° el mensaje "Intentalo nuevamente".

Si el usuario adivina, en cambio, todos los cuadrados y el <h1> deber√°n tener el color del cuadrado ganador y aparecer√° el mensaje "¬°Correcto!".
Para lograr esta din√°mica, segu√≠ estos pasos:

    1  Dentro del span#message mostraremos el mensaje
    2 Agreg√° un evento de click a cada uno de los cuadrados.


    Pista: Pod√©s aprovechar el Loop que hiciste antes.

    ü§ì Tip: Cuando el usuario haga click en un cuadrado necesitar√°s guardar su c√≥digo RGB en una variable clickedColor. Luego, lo comparar√°s con pickedColor y comprobar√°s si el color clickeado es el mismo que el color ganador previamente seleccionado.

    Qu√© Sucede Si Los Colores Son Distintos

    Si son distintos, le dar√°s a ese cuadrado el color de fondo del <body> y le mostrar√°s el mensaje "Intentalo Nuevamente" en el <span>.
üìõ Fijate si funciona correctamente cuando hac√©s click en los colores equivocados.


    Qu√© Sucede Si Los Colores Son Iguales
    Si son el mismo color, segu√≠ estos pasos:

   1 Mostr√° el mensaje "¬°Correcto!" en el <span>.
   2 Asignale al <h1> el color de fondo del ganador.

   Pista: ü§ì Tip: Para cambiar el color de los cuadrados, hac√© una Funci√≥n por fuera. De esta manera, mantendr√°s el c√≥digo ordenado.


   3 Dentro de una nueva Funci√≥n changeColors, que tomar√° como Argumento un color, iter√° sobre todos los cuadrados y dale el color de fondo del Argumento.
   4 Ejecut√° la Funci√≥n en el momento que el usuario hace click en el color correcto y pasale como Argumento ese color.

   üìõ Fijate si funciona cuando hac√©s click en el color correcto.

  5 Cre√° una Funci√≥n para asignarle a pickedColor un color aleatorio del Arreglo de colores. Para eso, cre√° la Funci√≥n pickColor que devuelva un color random:

   1 Dentro de la Funci√≥n pickColor cre√° un n√∫mero aleatorio entre los √çndices del Arreglo colors.
   2 Us√° ese n√∫mero para devolver un color del Arreglo.
   3 Asign√° lo que devuelve la Funci√≥n a la Variable pickedColor.

   üìõ Fijate si cada vez que actualiz√°s la p√°gina el color del <h1> es distinto y si el juego sigue funcionando.

  6 Cre√° la Funci√≥n randomColor para generar y devolver un color aleatorio.

    7 Cre√° la Funci√≥n generateRandomColors que generar√° de forma aleatoria el Arreglo de colores usando la randomColor.

    La Funci√≥n tomar√° como Argumento un n√∫mero que indique la longitud del Arreglo (6 o 3 cuadrados, dependiendo si se est√° jugando en Easy o Hard Mode).
    El Arreglo que devuelva esta Funci√≥n se lo asignar√°s a la Variable colors.

üìõ Por √∫ltimo, fijate si cada vez que carg√°s la p√°gina aparecen colores random en los cuadrados y funciona el juego.

 */

// ===============================================================================================================
//! Botones

// En esta parte del ejercicio crear√°s el bot√≥n de "Play Again?".

// Este bot√≥n tiene 2 funcionalidades:

//   1  Cuando se est√° jugando el juego, ofrece pedir nuevos colores.
//   2  Si se gan√≥ el juego, ofrece jugar otra vez.

// Pista: Te recomendamos guardar todo en una funci√≥n reset ya que luego la vas a necesitar.

// En ambos casos el efecto es el mismo: reinicia el juego con nuevos colores.

// Para crear el bot√≥n "Play Again?", segu√≠ estos pasos:

//   1  Seleccion√° el button#reset y dale un event listener para que, cuando se haga click:

//     Genere nuevos colores en el Arreglo.
//     Vuelva a elegir un color de ese Arreglo (para que sea el ganador) y aparezca en #colorDisplay.
//     Cambie los colores de los cuadrados con los nuevos colores.

// üìõ Fijate si todo sigue funcionando correctamente.

//    2 Agreg√° un evento para que, cuando el usuario gane, #reset cambie su texto a "Play Again?".
//    3 Agreg√° en el listener de #reset un evento para que, cuando el usuario haga click, vuelva a decir "Nuevos Colores" y desaparezca el mensaje "Intentalo Nuevamente" y "¬°Correcto!".

// Pista: Pod√©s modificar tu primera funci√≥n para agregar estos eventos.

// üìõ Antes de seguir avanzando, volv√© a resetear el color de fondo del <h1> y fijate si todo esta funcionando como deber√≠a.
// Los Botones Easy Y Hard

// En esta parte del ejercicio crear√°s los_ niveles. Al final del div#stripe ten√©s dos botones Easy y Hard que modificar√°n la dificultad del juego. Para hacerlo, segu√≠ los pasos indicados para cada bot√≥n.

/* El Bot√≥n Hard

1. El bot√≥n Hard tiene asignado la clase selected para que, al cargar la p√°gina, indique que est√° seleccionado. Tambi√©n cada bot√≥n tiene un ID para poder identificarlo.

2. Cre√° un event listener a cada uno para que, cuando le hagas click, le agregue la clase selected y se la quite al otro.


üìõ Fijate si funciona correctamente cuando hac√©s click en ambos botones.


El Bot√≥n Easy

Cuando hagamos click en el bot√≥n Easy queremos que se generen solo 3 colores con un color ganador y que se muestre en el t√≠tulo cu√°l es.
Para lograrlo, le asignaremos a los primeros 3 cuadrados los 3 colores del Arreglo y ocultaremos los otros 3 a trav√©s de la Propiedad display:none;.



Pista: 
Debe ser un String con el color. ü§ì Si el String es verdadero, le asignar√° el color al cuadrado, sino (si no hay ning√∫n elemento en ese √çndice y nos devuelve undefined) le cambiar√° al cuadrado la propiedad CSS display a none. De esta manera, el cuadrado se esconder√°.


üìõ Fijate que cuando hagas click en Easy los 3 primeros cuadrados cambien de color y los otros tres se escondan.


La √öltima Milla
En esta parte del ejercicio, te enfocar√°s nuevamente en el bot√≥n Hard.


üë©‚Äçüè´üë®‚Äçüè´ No te preocupes si el c√≥digo se empieza a repetir. Antes de terminar el proyecto lo podr√°s refactorizar.


Ahora deber√°s:

   1 Generar nuevos colores (que vuelvan a ser 6).
   2 Elegir un color ganador.
   3 Mostrar en el t√≠tulo cu√°l es ese color.

Para hacerlo, segu√≠ estos pasos:

   1 Hac√© Loop a todos los cuadrados y asignale a todos un color del Arreglo.
   2 Para poder volver a mostrar los cuadrados escondidos, dale a los cuadrados el Valor block a la propiedad CSS display.

üìõ Fijate si despu√©s de ir a Easy y volver a Hard se muestran los cuadrados escondidos y si aparecen nuevos colores. Tambi√©n corrobor√° si el juego funciona correctamente en ambos modos.



Pista:  Un üêû Bug En El Juego

üí£ En este momento, ten√©s un bug en el juego: cuando est√°s en el modo Easy y hac√©s click en #reset se generan 6 nuevos colores en el Arreglo que no se muestran en la pantalla.
Para solucionar este problema, crear√°s la Variable numberOfSquares que registre con cu√°ntos cuadrados se est√° jugando en ese momento:

    La Variable iniciar√° siendo 6.
    Cuando se haga click en Easy cambiar√° a 3.
    Cuando se haga click en Hard volver√° a 6.
    Luego, cada vez que se ejecute generateNumberColors ya no se pasar√° el n√∫mero Hard codeado como Argumento sino que se pasar√° la Variable numberOfSquares.

üìõ Fijate si se solucion√≥ el bug mostrando por consola cu√°ntos elementos hay en el Arreglo colors.


/*/
/*     */

document.addEventListener('DOMContentLoaded', function () {
  // Arreglo de colores iniciales
  let colors = [
    'rgb(240, 14, 128)',
    'rgb(34, 193, 195)',
    'rgb(235, 104, 65)',
    'rgb(0, 128, 0)',
    'rgb(255, 255, 0)',
    'rgb(128, 0, 128)',
  ];

  //    Seleccionar todos los cuadrados y otros elementos del DOM
  let squares = document.querySelectorAll('.square');
  let pickedColor = pickColor();
  let colorDisplay = document.getElementById('colorDisplay');
  let h1 = document.getElementById('h1');
  let messageDisplay = document.getElementById('message');
  let resetButton = document.getElementById('reset');
  let easyBtn = document.getElementById('easy');
  let hardBtn = document.getElementById('hard');
  let numSquares = 6; // N√∫mero predeterminado de cuadrados

  //    Inicializar la aplicaci√≥n
  init();

  //    Funci√≥n de inicializaci√≥n
  function init() {
    setupModeButtons();
    setupSquares();
    reset();
  }

  //    Configurar botones de modo (Easy y Hard)
  function setupModeButtons() {
    easyBtn.addEventListener('click', function () {
      numSquares = 3; // Cambiar a modo f√°cil (3 cuadrados)
      easyBtn.classList.add('selected');
      hardBtn.classList.remove('selected');
      reset();
    });

    hardBtn.addEventListener('click', function () {
      numSquares = 6; // Cambiar a modo dif√≠cil (6 cuadrados)
      hardBtn.classList.add('selected');
      easyBtn.classList.remove('selected');
      reset();
    });
  }

  //   Configurar eventos para los cuadrados
  function setupSquares() {
    for (let i = 0; i < squares.length; i++) {
      squares[i].addEventListener('click', function () {
        let clickedColor = this.style.backgroundColor;
        if (clickedColor === pickedColor) {
          // Si el color es correcto
          messageDisplay.textContent = '¬°Correcto!';
          setSquareColors(clickedColor);
          h1.style.backgroundColor = clickedColor;
          resetButton.textContent = 'Play Again?';
        } else {
          // Si el color es incorrecto
          this.style.backgroundColor = '#232323';
          messageDisplay.textContent = '¬°Int√©ntalo nuevamente!';
        }
      });
    }
  }

  //  / Restablecer la aplicaci√≥n
  function reset() {
    colors = generateRandomColors(numSquares);
    pickedColor = pickColor();
    colorDisplay.textContent = pickedColor;
    resetButton.textContent = 'Nuevos Colores';
    messageDisplay.textContent = '';
    for (let i = 0; i < squares.length; i++) {
      if (colors[i]) {
        squares[i].style.display = 'block';
        squares[i].style.backgroundColor = colors[i];
      } else {
        squares[i].style.display = 'none';
      }
    }
    h1.style.backgroundColor = 'steelblue';
  }

  //   Evento de clic para el bot√≥n de restablecimiento
  resetButton.addEventListener('click', function () {
    reset();
  });

  //    Funci√≥n para establecer los colores de todos los cuadrados
  function setSquareColors(color) {
    for (let i = 0; i < squares.length; i++) {
      squares[i].style.backgroundColor = color;
    }
  }

  //    Funci√≥n para seleccionar un color aleatorio del arreglo
  function pickColor() {
    let random = Math.floor(Math.random() * colors.length);
    return colors[random];
  }

  //    Funci√≥n para generar colores aleatorios
  function generateRandomColors(num) {
    let arr = [];
    for (let i = 0; i < num; i++) {
      arr.push(randomColor());
    }
    return arr;
  }

  // Funci√≥n para generar un color aleatorio
  function randomColor() {
    let r = Math.floor(Math.random() * 256);
    let g = Math.floor(Math.random() * 256);
    let b = Math.floor(Math.random() * 256);
    return 'rgb(' + r + ', ' + g + ', ' + b + ')';
  }
});
// ========================================================================================================
// ! Estilo

// Ahora que el juego funciona, nos enfocaremos en el estilo. En este punto, existen 2 caminos:

//   1  Seguir el maqueteado del ejemplo.
//   2  Crear tu propia versi√≥n.

// üë©‚Äçüè´üë®‚Äçüè´ Si eleg√≠s la segunda opci√≥n, ten√©s que respetar los lineamientos generales:

//   1  Los botones de "Nuevos Colores", "Easy" y "Hard", no deben parecer botones cl√°sicos ni tener una l√≠nea azul alrededor (en ingl√©s, outline) cuando le hacemos click.
//   2  El mensaje de "¬°Correcto!" y de "Intentalo Nuevamente" no tienen que mover a los otros elementos cuando aparecen.
//   3  Los cuadrados deben desaparecer con un efecto de transici√≥n de CSS. üîç Investig√° c√≥mo hacerlo.
// ü§ì Tip: Cualquier duda acerca de los colores, tama√±os y tipograf√≠as los pod√©s averiguar usando el Inspector De Elementos.
// üöÄ Avanz√° a la siguiente secci√≥n para potenciar tu proyecto.

/* ü§ì Tip: El Principio No Te Repitas (Don‚Äôt Repeat Yourself, DRY) es uno de los principios en el desarrollo de software cuyo principal objetivo es evitar la duplicaci√≥n de c√≥digo. Cuando refactorizamos el c√≥digo no solo lo volvemos m√°s elegante y prolijo sino que lo optimizamos.
 */
/*üöÄ Para potenciar tu proyecto refactoriz√° el c√≥digo siguiendo estos pasos:



   1 Los botones de Easy y Hard tienen un event listener similar. La diferencia entre ellos es que uno muestra 3 y, el otro, 6 colores. Para optimizarlo:

    Sacale el ID y hac√© que ambos compartan la misma clase.
    Coment√° las 2 funciones de los botones.

   2 Seleccion√° los botones y agreg√° un event listener que le d√© la clase selected al bot√≥n cliqueado.
   3 Para actualizar numSquare, cre√° una condicional en la que, dependiendo del textContent del bot√≥n cliqueado, el Valor de numSquare sea 3 o 6. ü§ì Pod√©s hacerlo con un operador ternario para ahorrar l√≠neas de c√≥digo.
   4 Gener√° una Funci√≥n reset para simplificar las l√≠neas de c√≥digo de estos procesos:

    Generar nuevos colores en el Arreglo.
    Elegir un color ganador.
    Actualizar el display de la p√°gina correctamente.



üë©‚Äçüè´ La Funci√≥n reset
La Funci√≥n reset deber√° considerar el mismo if statement en el que, dependiendo de si hay un color lo mostremos y, si no lo hay, lo ocultemos. Esto funcionar√° tanto en modo Easy como en Hard.


‚ö†Ô∏è Importante: Ahora que existe la Funci√≥n reset, borr√° un poco del c√≥digo. Por ejemplo, cuando hac√©s click el bot√≥n #reset llama directamente a esa Funci√≥n.


Pista:  Otros Usos De La Funci√≥n reset
ü§ì Tambi√©n pod√©s usar la Funci√≥n reset cuando reci√©n carga la p√°gina: Podr√≠a estar en una nueva Funci√≥n init donde est√© todo lo que necesita hacer cuando se carga la p√°gina (por ejemplo, el evento para los botones de modo y el event listener de los cuadrados).


√öltimos Detalles

    Como las Variables colors y pickedColor son definidas por reset, deber√°s definirlas sin un Valor.
    Ejecut√° init.
    Emprolij√° init: Hac√© 2 Funciones para los listeners agregados. De esta manera, init solo ser√° una Funci√≥n que ejecuta 3 Funciones.

üìõ Revis√° y comprob√° que tu proyecto funcione correctamente. Luego, pas√° a la √∫ltima secci√≥n de este proyecto.


*/
//! DRY

/*Si tu juego funciona correctamente y tiene el estilo que te gusta, ¬°refactoriz√° tu c√≥digo!


ü§ì Tip: El Principio No Te Repitas (Don‚Äôt Repeat Yourself, DRY) es uno de los principios en el desarrollo de software cuyo principal objetivo es evitar la duplicaci√≥n de c√≥digo. Cuando refactorizamos el c√≥digo no solo lo volvemos m√°s elegante y prolijo sino que lo optimizamos.


üöÄ Para potenciar tu proyecto refactoriz√° el c√≥digo siguiendo estos pasos:

   1 Los botones de Easy y Hard tienen un event listener similar. La diferencia entre ellos es que uno muestra 3 y, el otro, 6 colores. Para optimizarlo:

    Sacale el ID y hac√© que ambos compartan la misma clase.
    Coment√° las 2 funciones de los botones.

   2 Seleccion√° los botones y agreg√° un event listener que le d√© la clase selected al bot√≥n cliqueado.
   3 Para actualizar numSquare, cre√° una condicional en la que, dependiendo del textContent del bot√≥n cliqueado, el Valor de numSquare sea 3 o 6. ü§ì Pod√©s hacerlo con un operador ternario para ahorrar l√≠neas de c√≥digo.
   4 Gener√° una Funci√≥n reset para simplificar las l√≠neas de c√≥digo de estos procesos:

    Generar nuevos colores en el Arreglo.
    Elegir un color ganador.
    Actualizar el display de la p√°gina correctamente.



üë©‚Äçüè´ La Funci√≥n reset
La Funci√≥n reset deber√° considerar el mismo if statement en el que, dependiendo de si hay un color lo mostremos y, si no lo hay, lo ocultemos. Esto funcionar√° tanto en modo Easy como en Hard.


‚ö†Ô∏è Importante: Ahora que existe la Funci√≥n reset, borr√° un poco del c√≥digo. Por ejemplo, cuando hac√©s click el bot√≥n #reset llama directamente a esa Funci√≥n.

Pista:  Otros Usos De La Funci√≥n reset
ü§ì Tambi√©n pod√©s usar la Funci√≥n reset cuando reci√©n carga la p√°gina: Podr√≠a estar en una nueva Funci√≥n init donde est√© todo lo que necesita hacer cuando se carga la p√°gina (por ejemplo, el evento para los botones de modo y el event listener de los cuadrados).


√öltimos Detalles
    Como las Variables colors y pickedColor son definidas por reset, deber√°s definirlas sin un Valor.
    Ejecut√° init.
    Emprolij√° init: Hac√© 2 Funciones para los listeners agregados. De esta manera, init solo ser√° una Funci√≥n que ejecuta 3 Funciones.

üìõ Revis√° y comprob√° que tu proyecto funcione correctamente. Luego, pas√° a la √∫ltima secci√≥n de este proyecto.

*/
