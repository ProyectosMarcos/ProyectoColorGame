document.addEventListener('DOMContentLoaded', function () {
  // Arreglo de colores iniciales
  let colors = [
    'rgb(240, 14, 128)',
    'rgb(34, 193, 195)',
    'rgb(235, 104, 65)',
    'rgb(0, 128, 0)',
    'rgb(255, 255, 0)',
    'rgb(128, 0, 128)',
  ];

  //    Seleccionar todos los cuadrados y otros elementos del DOM
  let squares = document.querySelectorAll('.square');
  let pickedColor = pickColor();
  let colorDisplay = document.getElementById('colorDisplay');
  let h1 = document.getElementById('h1');
  let messageDisplay = document.getElementById('message');
  let resetButton = document.getElementById('reset');
  let easyBtn = document.getElementById('easy');
  let hardBtn = document.getElementById('hard');
  let numSquares = 6; // N√∫mero predeterminado de cuadrados

  //    Inicializar la aplicaci√≥n
  init();

  //    Funci√≥n de inicializaci√≥n
  function init() {
    setupModeButtons();
    setupSquares();
    reset();
  }

  //    Configurar botones de modo (Easy y Hard)
  function setupModeButtons() {
    easyBtn.addEventListener('click', function () {
      numSquares = 3; // Cambiar a modo f√°cil (3 cuadrados)
      easyBtn.classList.add('selected');
      hardBtn.classList.remove('selected');
      reset();
    });

    hardBtn.addEventListener('click', function () {
      numSquares = 6; // Cambiar a modo dif√≠cil (6 cuadrados)
      hardBtn.classList.add('selected');
      easyBtn.classList.remove('selected');
      reset();
    });
  }

  //   Configurar eventos para los cuadrados
  function setupSquares() {
    for (let i = 0; i < squares.length; i++) {
      squares[i].addEventListener('click', function () {
        let clickedColor = this.style.backgroundColor;
        if (clickedColor === pickedColor) {
          // Si el color es correcto
          messageDisplay.textContent = '¬°Correcto!';
          setSquareColors(clickedColor);
          h1.style.backgroundColor = clickedColor;
          resetButton.textContent = 'Play Again?';
        } else {
          // Si el color es incorrecto
          this.style.backgroundColor = '#232323';
          messageDisplay.textContent = '¬°Int√©ntalo nuevamente!';
        }
      });
    }
  }

  //  / Restablecer la aplicaci√≥n
  function reset() {
    colors = generateRandomColors(numSquares);
    pickedColor = pickColor();
    colorDisplay.textContent = pickedColor;
    resetButton.textContent = 'Nuevos Colores';
    messageDisplay.textContent = '';
    for (let i = 0; i < squares.length; i++) {
      if (colors[i]) {
        squares[i].style.display = 'block';
        squares[i].style.backgroundColor = colors[i];
      } else {
        squares[i].style.display = 'none';
      }
    }
    h1.style.backgroundColor = 'steelblue';
  }

  //   Evento de clic para el bot√≥n de restablecimiento
  resetButton.addEventListener('click', function () {
    reset();
  });

  //    Funci√≥n para establecer los colores de todos los cuadrados
  function setSquareColors(color) {
    for (let i = 0; i < squares.length; i++) {
      squares[i].style.backgroundColor = color;
    }
  }

  //    Funci√≥n para seleccionar un color aleatorio del arreglo
  function pickColor() {
    let random = Math.floor(Math.random() * colors.length);
    return colors[random];
  }

  //    Funci√≥n para generar colores aleatorios
  function generateRandomColors(num) {
    let arr = [];
    for (let i = 0; i < num; i++) {
      arr.push(randomColor());
    }
    return arr;
  }

  // Funci√≥n para generar un color aleatorio
  function randomColor() {
    let r = Math.floor(Math.random() * 256);
    let g = Math.floor(Math.random() * 256);
    let b = Math.floor(Math.random() * 256);
    return 'rgb(' + r + ', ' + g + ', ' + b + ')';
  }
});
// ========================================================================================================
// ! Estilo

// Ahora que el juego funciona, nos enfocaremos en el estilo. En este punto, existen 2 caminos:

//   1  Seguir el maqueteado del ejemplo.
//   2  Crear tu propia versi√≥n.

// üë©‚Äçüè´üë®‚Äçüè´ Si eleg√≠s la segunda opci√≥n, ten√©s que respetar los lineamientos generales:

//   1  Los botones de "Nuevos Colores", "Easy" y "Hard", no deben parecer botones cl√°sicos ni tener una l√≠nea azul alrededor (en ingl√©s, outline) cuando le hacemos click.
//   2  El mensaje de "¬°Correcto!" y de "Intentalo Nuevamente" no tienen que mover a los otros elementos cuando aparecen.
//   3  Los cuadrados deben desaparecer con un efecto de transici√≥n de CSS. üîç Investig√° c√≥mo hacerlo.
// ü§ì Tip: Cualquier duda acerca de los colores, tama√±os y tipograf√≠as los pod√©s averiguar usando el Inspector De Elementos.
// üöÄ Avanz√° a la siguiente secci√≥n para potenciar tu proyecto.

/* ü§ì Tip: El Principio No Te Repitas (Don‚Äôt Repeat Yourself, DRY) es uno de los principios en el desarrollo de software cuyo principal objetivo es evitar la duplicaci√≥n de c√≥digo. Cuando refactorizamos el c√≥digo no solo lo volvemos m√°s elegante y prolijo sino que lo optimizamos.
 */
/*üöÄ Para potenciar tu proyecto refactoriz√° el c√≥digo siguiendo estos pasos:



   1 Los botones de Easy y Hard tienen un event listener similar. La diferencia entre ellos es que uno muestra 3 y, el otro, 6 colores. Para optimizarlo:

    Sacale el ID y hac√© que ambos compartan la misma clase.
    Coment√° las 2 funciones de los botones.

   2 Seleccion√° los botones y agreg√° un event listener que le d√© la clase selected al bot√≥n cliqueado.
   3 Para actualizar numSquare, cre√° una condicional en la que, dependiendo del textContent del bot√≥n cliqueado, el Valor de numSquare sea 3 o 6. ü§ì Pod√©s hacerlo con un operador ternario para ahorrar l√≠neas de c√≥digo.
   4 Gener√° una Funci√≥n reset para simplificar las l√≠neas de c√≥digo de estos procesos:

    Generar nuevos colores en el Arreglo.
    Elegir un color ganador.
    Actualizar el display de la p√°gina correctamente.



üë©‚Äçüè´ La Funci√≥n reset
La Funci√≥n reset deber√° considerar el mismo if statement en el que, dependiendo de si hay un color lo mostremos y, si no lo hay, lo ocultemos. Esto funcionar√° tanto en modo Easy como en Hard.


‚ö†Ô∏è Importante: Ahora que existe la Funci√≥n reset, borr√° un poco del c√≥digo. Por ejemplo, cuando hac√©s click el bot√≥n #reset llama directamente a esa Funci√≥n.


Pista:  Otros Usos De La Funci√≥n reset
ü§ì Tambi√©n pod√©s usar la Funci√≥n reset cuando reci√©n carga la p√°gina: Podr√≠a estar en una nueva Funci√≥n init donde est√© todo lo que necesita hacer cuando se carga la p√°gina (por ejemplo, el evento para los botones de modo y el event listener de los cuadrados).


√öltimos Detalles

    Como las Variables colors y pickedColor son definidas por reset, deber√°s definirlas sin un Valor.
    Ejecut√° init.
    Emprolij√° init: Hac√© 2 Funciones para los listeners agregados. De esta manera, init solo ser√° una Funci√≥n que ejecuta 3 Funciones.

üìõ Revis√° y comprob√° que tu proyecto funcione correctamente. Luego, pas√° a la √∫ltima secci√≥n de este proyecto.


*/
//! DRY

/*Si tu juego funciona correctamente y tiene el estilo que te gusta, ¬°refactoriz√° tu c√≥digo!


ü§ì Tip: El Principio No Te Repitas (Don‚Äôt Repeat Yourself, DRY) es uno de los principios en el desarrollo de software cuyo principal objetivo es evitar la duplicaci√≥n de c√≥digo. Cuando refactorizamos el c√≥digo no solo lo volvemos m√°s elegante y prolijo sino que lo optimizamos.


üöÄ Para potenciar tu proyecto refactoriz√° el c√≥digo siguiendo estos pasos:

   1 Los botones de Easy y Hard tienen un event listener similar. La diferencia entre ellos es que uno muestra 3 y, el otro, 6 colores. Para optimizarlo:

    Sacale el ID y hac√© que ambos compartan la misma clase.
    Coment√° las 2 funciones de los botones.

   2 Seleccion√° los botones y agreg√° un event listener que le d√© la clase selected al bot√≥n cliqueado.
   3 Para actualizar numSquare, cre√° una condicional en la que, dependiendo del textContent del bot√≥n cliqueado, el Valor de numSquare sea 3 o 6. ü§ì Pod√©s hacerlo con un operador ternario para ahorrar l√≠neas de c√≥digo.
   4 Gener√° una Funci√≥n reset para simplificar las l√≠neas de c√≥digo de estos procesos:

    Generar nuevos colores en el Arreglo.
    Elegir un color ganador.
    Actualizar el display de la p√°gina correctamente.



üë©‚Äçüè´ La Funci√≥n reset
La Funci√≥n reset deber√° considerar el mismo if statement en el que, dependiendo de si hay un color lo mostremos y, si no lo hay, lo ocultemos. Esto funcionar√° tanto en modo Easy como en Hard.


‚ö†Ô∏è Importante: Ahora que existe la Funci√≥n reset, borr√° un poco del c√≥digo. Por ejemplo, cuando hac√©s click el bot√≥n #reset llama directamente a esa Funci√≥n.

Pista:  Otros Usos De La Funci√≥n reset
ü§ì Tambi√©n pod√©s usar la Funci√≥n reset cuando reci√©n carga la p√°gina: Podr√≠a estar en una nueva Funci√≥n init donde est√© todo lo que necesita hacer cuando se carga la p√°gina (por ejemplo, el evento para los botones de modo y el event listener de los cuadrados).


√öltimos Detalles
    Como las Variables colors y pickedColor son definidas por reset, deber√°s definirlas sin un Valor.
    Ejecut√° init.
    Emprolij√° init: Hac√© 2 Funciones para los listeners agregados. De esta manera, init solo ser√° una Funci√≥n que ejecuta 3 Funciones.

üìõ Revis√° y comprob√° que tu proyecto funcione correctamente. Luego, pas√° a la √∫ltima secci√≥n de este proyecto.

*/
